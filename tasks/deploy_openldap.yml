---
- name: Ensure software is installed (yum)
  yum: name={{ item }} state=present update_cache=yes
  with_items: "{{ openldap_packages }}"

- name: Enable service slapd
  systemd:
    name: slapd
    enabled: yes
    masked: no
  # when: wait and ansible_distribution == 'CentOS' and ansible_distribution_version >= '7'

- name: Enable service slapd
  service:
    name: slapd
    enabled: yes
  # when: wait and ansible_distribution == 'CentOS' and ansible_distribution_version < '7'

- name: Make sure slapd is running
  systemd: state=started name=slapd
  # when: wait and ansible_distribution == 'CentOS' and ansible_distribution_version >= '7'

- name: Make sure slapd is running
  service: state=started name=slapd
  # when: wait and ansible_distribution == 'CentOS' and ansible_distribution_version < '7'

- name: Get certs names to copy
  command: find {{ security_ssl_cert_folder }} -type f -name "*.pem"
  register: files_to_copy

- name: Copy certs on ldap folder
  copy:
    src: "{{ item }}"
    dest: "/etc/openldap/certs/"
    owner: ldap
    group: ldap
    remote_src: True
    mode: 0644
  with_items:
  - "{{ files_to_copy.stdout_lines }}"

- name: Copy certs on ldap folder
  copy:
    src: "{{ security_ssl_cacert_path }}"
    dest: "/etc/openldap/certs/"
    owner: ldap
    group: ldap
    remote_src: True
    mode: 0644

- name: Hash OpenLDAP rootpw
  command: slappasswd -h {{ openkrb_password_hash }} -s {{ openkrb_rootpw }}
  register: rootpw

- name: Copy DB ldif
  template: >
    src=db.ldif.j2
    dest=/tmp/db.ldif

- name: Copy MONITOR ldif
  template: >
    src=monitor.ldif.j2
    dest=/tmp/monitor.ldif

- name: Copy SSL ldif
  template: >
    src=ssl.ldif.j2
    dest=/tmp/ssl.ldif

- name: Copy BASE ldif
  template: >
    src=base.ldif.j2
    dest=/tmp/base.ldif

- name: Copy USER ldif
  template: >
    src=myuser.ldif.j2
    dest=/tmp/myuser.ldif

- name: Copy LOGLEVEL ldif
  template: >
    src=loglevel.ldif.j2
    dest=/tmp/loglevel.ldif

- name: Copy DB_CONFIG
  copy:
    src: /usr/share/openldap-servers/DB_CONFIG.example
    dest: /var/lib/ldap/DB_CONFIG
    owner: ldap
    group: ldap
    remote_src: True
    mode: 0644

- name: Inject DB.ldif to openldap
  command: ldapmodify -Y EXTERNAL  -H ldapi:/// -f /tmp/db.ldif

- name: Inject MONITOR.ldif to openldap
  command: ldapmodify -Y EXTERNAL  -H ldapi:/// -f /tmp/monitor.ldif

- name: Inject SSL.ldif to openldap
  command: ldapmodify -Y EXTERNAL  -H ldapi:/// -f /tmp/ssl.ldif

- name: Check if LOGLEVEL already set
  command: ldapsearch -Y EXTERNAL  -H ldapi:/// -b "cn=config" -s sub "objectclass=*"
  register: checkloglevel
  check_mode: no
  ignore_errors: True
  changed_when: False

- name: Inject LOGLEVEL.ldif to openldap
  command: ldapmodify -Y EXTERNAL  -H ldapi:/// -f /tmp/loglevel.ldif
  failed_when: checkloglevel.stdout.find("olcLoglevel") == 0

- name: Check if cosine schema already exists
  command: ldapsearch -Y EXTERNAL  -H ldapi:/// -b "cn=schema,cn=config" -s sub "objectclass=*"
  register: checkcosine
  # check_mode: no
  ignore_errors: True
  changed_when: False

- name: Inject cosine.ldif to openldap
  command: ldapadd -Y EXTERNAL  -H ldapi:/// -f /etc/openldap/schema/cosine.ldif
  failed_when: checkcosine.stdout.find("cosine,cn=schema,cn=config") == 0

- name: Check if nis schema already exists
  command: ldapsearch -Y EXTERNAL  -H ldapi:/// -b "cn=schema,cn=config" -s sub "objectclass=*"
  register: checknis
  check_mode: no
  ignore_errors: True
  changed_when: False

- name: Inject nis.ldif to openldap
  command: ldapadd -Y EXTERNAL  -H ldapi:/// -f /etc/openldap/schema/nis.ldif
  failed_when: checknis.stdout.find("nis,cn=schema,cn=config") == 0

- name: Check if inetorgperson schema already exists
  command: echo `ldapsearch -Y EXTERNAL  -H ldapi:/// -b "cn=schema,cn=config" -s sub "objectclass=*"`
  register: checkinetorgperson
  check_mode: no
  ignore_errors: True
  changed_when: False

- name: Inject inetorgperson.ldif to openldap
  command: ldapadd -Y EXTERNAL  -H ldapi:/// -f /etc/openldap/schema/inetorgperson.ldif
  failed_when: checkinetorgperson.stdout.find("inetorgperson,cn=schema,cn=config") == 0

- name: Check if base schema already exists
  command: echo `ldapsearch -Y EXTERNAL  -H ldapi:/// -b "cn=schema,cn=config" -s sub "objectclass=*"`
  register: checkbase
  check_mode: no
  ignore_errors: True
  changed_when: False

- name: Inject base.ldif to openldap
  command: ldapadd -x -w {{ openkrb_rootpw }} -D "cn=ldapadm,{{ openkrb_domain }}" -f /tmp/base.ldif
  failed_when: checkbase.stdout.find("base,cn=schema,cn=config") == 0

- name: Check whether /etc/sysconfig/slapd contains "ldaps:///"
  command: cat /etc/sysconfig/slapd
  register: checkldaps
  check_mode: no
  ignore_errors: True
  changed_when: False

- name: Enable LDAPS 1
  lineinfile:
    path: /etc/sysconfig/slapd
    regexp: '^SLAPD_URLS='
    line: 'SLAPD_URLS="ldapi:/// ldap:/// ldaps:///"'
    state: present
- name: Enable LDAPS 2
  lineinfile:
    path: /etc/sysconfig/slapd
    regexp: '^SLAPD_LDAPS='
    line: 'SLAPD_LDAPS=yes'
    state: present
- name: Enable LDAPS 3
  lineinfile:
    path: /etc/openldap/ldap.conf
    regexp: '^TLS_CACERT'
    line: 'TLS_CACERT /etc/openldap/certs/{{ security_ssl_cacert_name }}'
    state: present

- name: Check if the user {{ openkrb_user_test }} exists
  command: echo `ldapsearch -Y EXTERNAL  -H ldapi:/// -b "{{ openkrb_ou_users }},{{ openkrb_domain }}" -s sub "objectclass=*"`
  register: checkuser
  check_mode: no
  ignore_errors: True
  changed_when: False

- name: Create user {{ openkrb_user_test }}
  command: ldapadd -x -w {{ openkrb_rootpw }} -D "cn=ldapadm,{{ openkrb_domain }}" -f /tmp/myuser.ldif
  failed_when: checkuser.stdout.find("{{ openkrb_user_test }}") == 0

- name: Change test user password
  command: ldappasswd -s {{ openkrb_user_test_password }} -w {{ openkrb_rootpw }} -D "cn=ldapadm,{{ openkrb_domain }}" -x "uid={{ openkrb_user_test }},{{ openkrb_ou_users }},{{ openkrb_domain }}"
  failed_when: checkuser.rc != 0

- name: Check if system log is enabled
  command: cat /etc/rsyslog.conf
  register: checklogsystem
  check_mode: no
  ignore_errors: True
  changed_when: False

- name: Enable system log
  shell: echo 'local4.*   /var/log/ldap.log' >> /etc/rsyslog.conf
  failed_when: checklogsystem.stdout.find("/var/log/ldap.log") == 0

- name: Fix LDAPsearch
  lineinfile:
    path: /etc/openldap/ldap.conf
    regexp: '^URI'
    line: '#URI'
    state: present
- name: Fix LDAPsearch
  lineinfile:
    path: /etc/openldap/ldap.conf
    regexp: '^BASE'
    line: '#BASE'
    state: present

### Create users and refined ACL
- name: Create users and refined ACL
  block:
    - name: Get SSHA password
      command: slappasswd -h {{ openkrb_password_hash }} -s {{ openkrb_krb_admin_password }}
      register: krbadminpw
    - name: Create krbadm
      ldap_entry:
        dn: cn={{ openkrb_krb_admin_user }},{{ openkrb_domain }}
        objectClass:
          - simpleSecurityObject
          - organizationalRole
        attributes:
          description: Krb admin
          userPassword: "{{ krbadminpw.stdout }}"
        bind_dn: cn=ldapadm,{{ openkrb_domain }}
        bind_pw: "{{ openkrb_rootpw }}"
    - name: Get SSHA password
      command: slappasswd -h {{ openkrb_password_hash }} -s {{ openkrb_hdpadm_admin_password }}
      register: hdpadminpw
    - name: Create hdpadm
      ldap_entry:
        dn: cn={{ openkrb_hdpadm_admin_user }},{{ openkrb_domain }}
        objectClass:
          - simpleSecurityObject
          - organizationalRole
        attributes:
          description: HDP admin
          userPassword: "{{ hdpadminpw.stdout }}"
        bind_dn: cn=ldapadm,{{ openkrb_domain }}
        bind_pw: "{{ openkrb_rootpw }}"
    - name: Get SSHA password
      command: slappasswd -h {{ openkrb_password_hash }} -s {{ openkrb_sssd_admin_password }}
      register: sssdadminpw
    - name: Create sssdadm
      ldap_entry:
        dn: cn={{ openkrb_sssd_admin_user }},{{ openkrb_domain }}
        objectClass:
          - simpleSecurityObject
          - organizationalRole
        attributes:
          description: SSSD admin
          userPassword: "{{ sssdadminpw.stdout }}"
        bind_dn: cn=ldapadm,{{ openkrb_domain }}
        bind_pw: "{{ openkrb_rootpw }}"
    - name: Set up the ACL
      ldap_attr:
        dn: olcDatabase={2}hdb,cn=config
        name: olcAccess
        values:
          - >-
            {0}to attrs=userPassword,shadowLastChange,userPKCS12
            by self write
            by anonymous auth
            by * none
          - >-
            {1}to dn.subtree="cn=krbContainer,{{ openkrb_domain }}"
            by dn.exact="cn={{ openkrb_krb_admin_user }},{{ openkrb_domain }}" write
            by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" read
            by * none
          - >-
            {2}to dn.subtree="{{ openkrb_ou_groups }},{{ openkrb_domain }}"
            by dn.exact="cn={{ openkrb_sssd_admin_user }},{{ openkrb_domain }}" read
            by dn.exact="cn={{ openkrb_hdpadm_admin_user }},{{ openkrb_domain }}" read
            by dn.children="{{ openkrb_ou_groups }},{{ openkrb_domain }}" read
            by * none
          - >-
            {3}to dn.subtree="{{ openkrb_ou_users }},{{ openkrb_domain }}"
            by dn.exact="cn={{ openkrb_sssd_admin_user }},{{ openkrb_domain }}" read
            by dn.exact="cn={{ openkrb_hdpadm_admin_user }},{{ openkrb_domain }}" read
            by dn.children="{{ openkrb_ou_users }},{{ openkrb_domain }}" read
            by * none
        state: exact
  # when: inventory_hostname == "{{ openkrb_servers_masters | first }}"

- name: Restart service rsyslog
  systemd:
    state: restarted
    name: rsyslog
  register: restart_rsyslog
  until: restart_rsyslog.status.Result == "success"
  retries: 10
  delay: 20
  when: wait and ansible_distribution == 'CentOS' and ansible_distribution_version >= '7'

- name: Restart service rsyslog
  service:
    state: restarted
    name: rsyslog
  register: restart_rsyslog
  until: restart_rsyslog.status.Result == "success"
  retries: 10
  delay: 20
  when: wait and ansible_distribution == 'CentOS' and ansible_distribution_version < '7'


- name: Restart service slapd
  systemd:
    state: restarted
    name: slapd
  register: restart_slapd
  until: restart_slapd.status.Result == "success"
  retries: 10
  delay: 20
  when: wait and ansible_distribution == 'CentOS' and ansible_distribution_version >= '7'


- name: Restart service slapd
  service:
    state: restarted
    name: slapd
  register: restart_slapd
  until: restart_slapd.status.Result == "success"
  retries: 10
  delay: 20
  when: wait and ansible_distribution == 'CentOS' and ansible_distribution_version < '7'
