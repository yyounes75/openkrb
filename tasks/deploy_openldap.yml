---
- name: Ensure software is installed (AlmaLinux)
  block:
    - name: Enable EPEL repo
      dnf:
        name: epel-release
        enablerepo: powertools
        state: present
        update_cache: yes
    - name: Install packages
      dnf:
        name: "{{ item }}"
        enablerepo: powertools
        state: present
        update_cache: yes
      with_items: "{{ openldap_packages_rocky }}"
  when: ansible_distribution == 'AlmaLinux'

- name: Ensure software is installed (CentOS/Redhat)
  yum:
    name: "{{ item }}" 
    state: present
    update_cache: yes
  with_items: "{{ openldap_packages }}"
  when: (ansible_distribution != 'Rocky') and (ansible_distribution != 'AlmaLinux')

- name: Ensure software is installed (Rocky)
  yum:
    name: "{{ item }}"
    enablerepo: plus 
    state: present
    update_cache: yes
  with_items: "{{ openldap_packages_rocky }}"
  when: ansible_distribution == 'Rocky'

- name: Enable service slapd
  systemd:
    name: slapd
    enabled: yes
    masked: no
  # when: wait and ansible_distribution_version >= '7'

- name: Enable service slapd
  service:
    name: slapd
    enabled: yes
  # when: wait and ansible_distribution_version < '7'

- name: Make sure slapd is running
  systemd: state=started name=slapd
  # when: wait and ansible_distribution_version >= '7'

- name: Make sure slapd is running
  service: state=started name=slapd
  # when: wait and ansible_distribution_version < '7'

- name: Get certs names to copy
  command: find {{ security_ssl_cert_folder }} -type f -name "*.pem"
  register: files_to_copy

- name: Copy certs on ldap folder
  copy:
    src: "{{ item }}"
    dest: "/etc/openldap/certs/"
    owner: ldap
    group: ldap
    remote_src: True
    mode: 0644
  with_items:
  - "{{ files_to_copy.stdout_lines }}"

- name: Copy certs on ldap folder
  copy:
    src: "{{ security_ssl_cacert_path }}"
    dest: "/etc/openldap/certs/"
    owner: ldap
    group: ldap
    remote_src: True
    mode: 0644

- name: Hash OpenLDAP rootpw
  command: slappasswd -h {{ openkrb_password_hash }} -s {{ openkrb_rootpw }}
  register: rootpw

- name: Copy files
  block:
    - name: Copy DB ldif
      template: >
        src=db.ldif.j2
        dest=/tmp/db.ldif

    - name: Copy MONITOR ldif
      template: >
        src=monitor.ldif.j2
        dest=/tmp/monitor.ldif

    - name: Copy SSL ldif
      template: >
        src=ssl.ldif.j2
        dest=/tmp/ssl.ldif

    - name: Copy BASE ldif
      template: >
        src=base.ldif.j2
        dest=/tmp/base.ldif

    - name: Copy USER ldif
      template: >
        src=myuser.ldif.j2
        dest=/tmp/myuser.ldif

    - name: Copy LOGLEVEL ldif
      template: >
        src=loglevel.ldif.j2
        dest=/tmp/loglevel.ldif
  when: (ansible_distribution != 'Rocky') and (ansible_distribution != 'AlmaLinux')

- name: Copy files
  block:
    - name: Copy DB ldif
      template:
        src: rhel8/db.ldif.j2
        dest: /tmp/db.ldif

    - name: Copy MONITOR ldif
      template:
        src: rhel8/monitor.ldif.j2
        dest: /tmp/monitor.ldif

    - name: Copy SSL ldif
      template:
        src: rhel8/ssl.ldif.j2
        dest: /tmp/ssl.ldif

    - name: Copy BASE ldif
      template:
        src: rhel8/base.ldif.j2
        dest: /tmp/base.ldif

    - name: Copy USER ldif
      template:
        src: rhel8/myuser.ldif.j2
        dest: /tmp/myuser.ldif

    - name: Copy LOGLEVEL ldif
      template:
        src: rhel8/loglevel.ldif.j2
        dest: /tmp/loglevel.ldif
  when: ansible_distribution == 'Rocky' or ansible_distribution == 'AlmaLinux'

- name: Copy DB_CONFIG
  template:
    src: DB_CONFIG.example.j2
    dest: /var/lib/ldap/DB_CONFIG
    owner: ldap
    group: ldap
    # remote_src: True
    mode: 0644

- name: Inject DB.ldif to openldap
  command: ldapmodify -Y EXTERNAL  -H ldapi:/// -f /tmp/db.ldif

- name: Inject MONITOR.ldif to openldap
  command: ldapmodify -Y EXTERNAL  -H ldapi:/// -f /tmp/monitor.ldif

- name: Inject SSL.ldif to openldap
  command: ldapmodify -Y EXTERNAL  -H ldapi:/// -f /tmp/ssl.ldif

- name: Check if LOGLEVEL already set
  command: ldapsearch -Y EXTERNAL  -H ldapi:/// -b "cn=config" -s sub "objectclass=*"
  register: checkloglevel
  check_mode: no
  ignore_errors: True
  changed_when: False

- name: Inject LOGLEVEL.ldif to openldap
  command: ldapmodify -Y EXTERNAL  -H ldapi:/// -f /tmp/loglevel.ldif
  failed_when: checkloglevel.stdout.find("olcLoglevel") == 0

- name: Check if cosine schema already exists
  command: ldapsearch -Y EXTERNAL  -H ldapi:/// -b "cn=schema,cn=config" -s sub "objectclass=*"
  register: checkcosine
  # check_mode: no
  ignore_errors: True
  changed_when: False

- name: Inject cosine.ldif to openldap
  command: ldapadd -Y EXTERNAL  -H ldapi:/// -f /etc/openldap/schema/cosine.ldif
  failed_when: checkcosine.stdout.find("cosine,cn=schema,cn=config") == 0

- name: Check if nis schema already exists
  command: ldapsearch -Y EXTERNAL  -H ldapi:/// -b "cn=schema,cn=config" -s sub "objectclass=*"
  register: checknis
  check_mode: no
  ignore_errors: True
  changed_when: False

- name: Inject nis.ldif to openldap
  command: ldapadd -Y EXTERNAL  -H ldapi:/// -f /etc/openldap/schema/nis.ldif
  failed_when: checknis.stdout.find("nis,cn=schema,cn=config") == 0

- name: Check if inetorgperson schema already exists
  command: echo `ldapsearch -Y EXTERNAL  -H ldapi:/// -b "cn=schema,cn=config" -s sub "objectclass=*"`
  register: checkinetorgperson
  check_mode: no
  ignore_errors: True
  changed_when: False

- name: Inject inetorgperson.ldif to openldap
  command: ldapadd -Y EXTERNAL  -H ldapi:/// -f /etc/openldap/schema/inetorgperson.ldif
  failed_when: checkinetorgperson.stdout.find("inetorgperson,cn=schema,cn=config") == 0

- name: Check if base schema already exists
  command: echo `ldapsearch -Y EXTERNAL  -H ldapi:/// -b "cn=schema,cn=config" -s sub "objectclass=*"`
  register: checkbase
  check_mode: no
  ignore_errors: True
  changed_when: False

- name: Inject base.ldif to openldap
  command: ldapadd -x -w {{ openkrb_rootpw }} -D "cn=ldapadm,{{ openkrb_domain }}" -f /tmp/base.ldif
  failed_when: checkbase.stdout.find("base,cn=schema,cn=config") == 0

- name: Enable LDAPS
  block:
    - name: Check whether /etc/sysconfig/slapd contains "ldaps:///"
      command: cat /etc/sysconfig/slapd
      register: checkldaps
      check_mode: no
      ignore_errors: True
      changed_when: False
    - name: Enable LDAPS 1
      lineinfile:
        path: /etc/sysconfig/slapd
        regexp: '^SLAPD_URLS='
        line: 'SLAPD_URLS="ldapi:/// ldap:/// ldaps:///"'
        state: present
    - name: Enable LDAPS 2
      lineinfile:
        path: /etc/sysconfig/slapd
        regexp: '^SLAPD_LDAPS='
        line: 'SLAPD_LDAPS=yes'
        state: present
  when: (ansible_distribution != 'Rocky') and (ansible_distribution != 'AlmaLinux')

- name: Enable LDAPS 3
  lineinfile:
    path: /etc/openldap/ldap.conf
    regexp: '^TLS_CACERT'
    line: 'TLS_CACERT /etc/openldap/certs/{{ security_ssl_cacert_name }}'
    state: present

- name: Check if the user {{ openkrb_user_test }} exists
  command: echo `ldapsearch -Y EXTERNAL  -H ldapi:/// -b "{{ openkrb_ou_users }},{{ openkrb_domain }}" -s sub "objectclass=*"`
  register: checkuser
  check_mode: no
  ignore_errors: True
  changed_when: False

- name: Create user {{ openkrb_user_test }}
  command: ldapadd -x -w {{ openkrb_rootpw }} -D "cn=ldapadm,{{ openkrb_domain }}" -f /tmp/myuser.ldif
  failed_when: checkuser.stdout.find("{{ openkrb_user_test }}") == 0

- name: Change test user password
  command: ldappasswd -s {{ openkrb_user_test_password }} -w {{ openkrb_rootpw }} -D "cn=ldapadm,{{ openkrb_domain }}" -x "uid={{ openkrb_user_test }},{{ openkrb_ou_users }},{{ openkrb_domain }}"
  failed_when: checkuser.rc != 0

- name: Check if system log is enabled
  command: cat /etc/rsyslog.conf
  register: checklogsystem
  check_mode: no
  ignore_errors: True
  changed_when: False

- name: Enable system log
  shell: echo 'local4.*   /var/log/ldap.log' >> /etc/rsyslog.conf
  failed_when: checklogsystem.stdout.find("/var/log/ldap.log") == 0

- name: Fix LDAPsearch
  lineinfile:
    path: /etc/openldap/ldap.conf
    regexp: '^URI'
    line: '#URI'
    state: present
- name: Fix LDAPsearch
  lineinfile:
    path: /etc/openldap/ldap.conf
    regexp: '^BASE'
    line: '#BASE'
    state: present

- name: Restart service rsyslog
  systemd:
    state: restarted
    name: rsyslog
  register: restart_rsyslog
  until: restart_rsyslog.status.Result == "success"
  retries: 10
  delay: 20
  when: wait and ansible_distribution_version >= '7'

- name: Restart service rsyslog
  service:
    state: restarted
    name: rsyslog
  register: restart_rsyslog
  until: restart_rsyslog.status.Result == "success"
  retries: 10
  delay: 20
  when: wait and ansible_distribution_version < '7'

- name: Restart service slapd
  systemd:
    state: restarted
    name: slapd
  register: restart_slapd
  until: restart_slapd.status.Result == "success"
  retries: 10
  delay: 20
  when: wait and ansible_distribution_version >= '7'


- name: Restart service slapd
  service:
    state: restarted
    name: slapd
  register: restart_slapd
  until: restart_slapd.status.Result == "success"
  retries: 10
  delay: 20
  when: wait and ansible_distribution_version < '7'
